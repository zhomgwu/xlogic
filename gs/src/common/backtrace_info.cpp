#include "backtrace_info.h"

#include <execinfo.h>
#include <memory>
#include <cxxabi.h>
#include <string.h>

const int kMaximumAddresses = 100;
// The prefix used for mangled symbols, per the Itanium C++ ABI:  
// http://www.codesourcery.com/cxx-abi/abi.html#mangling  
const char kMangledSymbolPrefix[] = "_Z";
// Characters that can be used for symbols, generated by Ruby:  
// (('a'..'z').to_a+('A'..'Z').to_a+('0'..'9').to_a + ['_']).join  
const char kSymbolCharacters[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";

static std::string _demangle_symbol(const char* input_symbol)
{
	std::string symbol = input_symbol;
	std::string::size_type search_from = 0;
	while(search_from < symbol.size())
	{
		// Look for the start of a mangled symbol from search_from  
		std::string::size_type mangled_start = symbol.find(kMangledSymbolPrefix, search_from);
		if(mangled_start == std::string::npos) 
		{
			break; // Mangled symbol not found  
		}
		// Look for the end of the mangled symbol  
		std::string::size_type mangled_end = symbol.find_first_not_of(kSymbolCharacters, mangled_start);
		if(mangled_end == std::string::npos) 
		{
			mangled_end = symbol.size();
		}
		std::string mangled_symbol = std::move(symbol.substr(mangled_start, mangled_end - mangled_start));
		// Try to demangle the mangled symbol candidate  
		int status = -4; // some arbitrary value to eliminate the compiler warning  
		std::unique_ptr<char, void(*)(void*)> demangled_symbol(abi::__cxa_demangle(mangled_symbol.c_str(), nullptr, 0, &status),std::free);
		// 0 Demangling is success  
		if(0 == status) 
		{
			// Remove the mangled symbol  
			symbol.erase(mangled_start, mangled_end - mangled_start);
			// Insert the demangled symbol  
			symbol.insert(mangled_start, demangled_symbol.get());
			// Next time, we will start right after the demangled symbol  
			search_from = mangled_start + strlen(demangled_symbol.get());
		}
		else 
		{
			// Failed to demangle. Retry after the "_Z" we just found  
			search_from = mangled_start + 2;
		}
	}

	return symbol;
}

std::string backtrack_info::get_backtrace_info() {
	
	void* addr_buffer[kMaximumAddresses];
	int addr_buffer_num = backtrace(addr_buffer, kMaximumAddresses);

	// man: backtrace_symbols(). This array is malloc(3)ed by.
	char **bt_str = backtrace_symbols(addr_buffer, addr_buffer_num); 
	if (bt_str == nullptr) {
		addr_buffer_num = 0;
		return "EMPTY BACKTRACE";
	}

	std::string trace_info;
	trace_info.clear();
	trace_info = "BACKTRACE INFO: \n";
	for (int i = 1; i < addr_buffer_num; ++i) {
		char frame_info[1024] = {};
		snprintf(frame_info, 1024, "#%d %s\n", i, _demangle_symbol(bt_str[i]).c_str());
		trace_info += frame_info;
	}

	free(bt_str);
	return trace_info;
}

